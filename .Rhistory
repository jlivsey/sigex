-0.09955060405249, 0.11660784869795, 0.15789980223364, -0.03631849815476,
0.18385749297074, 0.32935147758533, -2.1377604820296, -3.62882764786239,
-5.11279846492415, -3.62475631527416, 0.12430528614515, 0.02925079204219,
-0.08733491948454, 0.17897776431614, 0.48438912873225, 0.26583597642199,
1.87566939226944, 0.1445002084775, -1.34264222816582, -0.30536763401493,
-0.00488431480035, -0.00094565956468, -0.00106126820173, -0.00041365883889
)
sigex.resid(psi.mle,mdl,data.ts)[[1]]
temp <- sigex.resid(psi.mle,mdl,data.ts)[[1]]
setwd("C:\\Users\\Tucker\\OneDrive\\Documents\\Research\\Casting")
dom <- read.table("bullwhipCase.dat")
setwd("C:\\Users\\Tucker\\OneDrive\\Documents\\Research\\Casting\\Figures")
# tti is Bathroom tissues (product 65)
# ptw is Paper towels (product 41)
# No information on start date, somewhere between 1989 and 1994
start.date <- c(1,1)
period <- 1
## create ts object and plot
dataALL.ts <- sigex.load(dom,start.date,period,c("tti","ptw"),TRUE)
N <- dim(dataALL.ts)[2]
## replace meager values by NA
for(k in 1:N)
{
times.zero <- seq(1,T)[dataALL.ts[,k] <= 0]
times.zero <- times.zero[-seq(1,length(times.zero))[is.na(times.zero)]]
dataALL.ts[times.zero,k] <- NA
}
k
times.zero <- seq(1,T)[dataALL.ts[,k] <= 0]
times.zero <- times.zero[-seq(1,length(times.zero))[is.na(times.zero)]]
dataALL.ts[times.zero,k] <- NA
times.zero
N <- dim(dataALL.ts)[2]
T <- dim(dataALL.ts)[1]
## replace meager values by NA
for(k in 1:N)
{
times.zero <- seq(1,T)[dataALL.ts[,k] <= 0]
times.zero <- times.zero[-seq(1,length(times.zero))[is.na(times.zero)]]
dataALL.ts[times.zero,k] <- NA
}
## full span with log transform
transform <- "log"
aggregate <- FALSE
subseries <- c(1,2)
begin.date <- start.date
end.date <- end(dataALL.ts)
range <- list(begin.date,end.date)
data.ts <- sigex.prep(dataALL.ts,transform,aggregate,subseries,range,TRUE)
N <- dim(data.ts)[2]
T <- dim(data.ts)[1]
# best model was p=3, delta = [1,1,1]
ar.delta <- c(1,1,1)
ma.delta <- NULL
## model construction
mdl <- NULL
mdl <- sigex.add(mdl,seq(1,N),"varma",c(3,0),list(ar.delta,ma.delta),"process",1)
# regressors:
mdl <- sigex.meaninit(mdl,data.ts,0)
par.mle <- sigex.default(mdl,data.ts)[[1]]
flag.mle <- sigex.default(mdl,data.ts)[[2]]
psi.mle <- sigex.par2psi(par.mle,flag.mle,mdl)
fit.mle <- list(list(par = c(0.00774525185660389, -0.98822758684062, -1.82365193777049,
0.327014237654645, -3.63780580373079, -1.25402162322456, 0.0633295016058837,
1.41173754160826, -4.08328432189346, -3.23260194827172, 0.09460417080606,
0.361799186195538, -5.13329190294931, -4.87327696696165, 0.0209583214353983,
4.12465264379121, 3.75849659831345), value = -297.275727913202,
counts = c(`function` = 115L, gradient = 115L), convergence = 1L,
message = "NEW_X", hessian = structure(c(1702.2274102203,
-0.282969381260045, -1.20401089986899, 0.194094127436983,
-0.0393054051528452, -0.674042624382309, 7.58254093113919,
0.289982594381399, 0.685734889316336, -0.368586441368279,
-2.72655925925847, 0.180540865812873, -0.0470332395252626,
0.0619555180492171, -1.54872802227146, -4.71675953406248,
0.536540483153658, -0.282969381260045, 370.833252787861,
0.249946978669868, -0.0650228315635104, 0.251450742894122,
-0.0243082496353964, -0.75069344518397, -0.0779863711386497,
0.190010538858587, -0.0714138082003046, -1.00594802177056,
0.00345004025348317, 0.12450252029339, -0.0238602524404996,
-0.446631389650065, 1.23410764274468, -0.313848474320366,
-1.20401089986899, 0.249946978669868, 370.639922181226, 0.0491995137963386,
0.00234604158322327, 1.62574325202058, 4.24168653978541,
0.508989288050543, 0.313023861053807, 0.486407927269283,
0.779688022589653, -0.00640707753518654, -0.0199308232140538,
0.0430737827628036, 0.245708889679008, -1.24613535490425,
0.314324339001359, 0.194094127436983, -0.0650228315635104,
0.0491995137963386, 1.24560688163911, -0.165753903047516,
-0.115982160764361, -36.4015990754751, -0.442025594793449,
-0.606345935239005, 0.0560235093871597, 2.52022293523169,
-0.0557882202656401, -0.010064979960589, -0.0795672150388782,
0.0634021972700793, -0.116058856747259, 0.0542136859849052,
-0.0393054051528452, 0.251450742894122, 0.00234604158322327,
-0.165753903047516, 3.40262053555307, 0.0707735523519659,
-6.50688708958569, 0.0769639001418909, -0.540088535672112,
-0.0149935885929153, 2.06286722459481, -0.102315283356802,
-0.0377995235112394, 0.00176447656485834, -0.132765521243527,
0.420135947365452, -0.00942698363814998, -0.674042624382309,
-0.0243082496353964, 1.62574325202058, -0.115982160764361,
0.0707735523519659, 19.5939071261364, 64.9838490147658, -2.09351043167771,
-1.48847995262713, -1.45346278657144, 9.23259680973842, -0.0604205183662998,
-0.0143190703738583, -0.00709574976553995, 0.732132988900958,
0.626541350357002, -0.068955813503635, 7.58254093113919,
-0.75069344518397, 4.24168653978541, -36.4015990754751, -6.50688708958569,
64.9838490147658, 2339.6510150917, 8.77590554182461, 9.4974457169883,
5.26134503786579, 134.125190228929, 1.68885861739909, 0.0835348572536532,
4.09577286575313, 8.87950967864981, 21.4656728303453, -3.20622730498599,
0.289982594381399, -0.0779863711386497, 0.508989288050543,
-0.442025594793449, 0.0769639001418909, -2.09351043167771,
8.77590554182461, 6.7349190828736, 4.6714512222934, 3.52079966603469,
-9.65957752896429, -0.308068507592907, -0.121511533279772,
-0.0205952233045537, 1.44423542280947, -0.131532090108522,
0.0483201745282713, 0.685734889316336, 0.190010538858587,
0.313023861053807, -0.606345935239005, -0.540088535672112,
-1.48847995262713, 9.4974457169883, 4.6714512222934, 6.66011419525603,
1.64949629777311, -30.6771468387979, -0.212684682310282,
-0.126972494740585, 0.0107769153601112, 1.14758491065459,
0.69278131320516, 0.16965125837487, -0.368586441368279, -0.0714138082003046,
0.486407927269283, 0.0560235093871597, -0.0149935885929153,
-1.45346278657144, 5.26134503786579, 3.52079966603469, 1.64949629777311,
5.49130686522403, 24.8125693929069, -0.217642224242809, -0.0262895269997898,
-0.0453131008271157, 1.0592050472269, 0.542795575597665,
0.0150120342823357, -2.72655925925847, -1.00594802177056,
0.779688022589653, 2.52022293523169, 2.06286722459481, 9.23259680973842,
134.125190228929, -9.65957752896429, -30.6771468387979, 24.8125693929069,
506.620260011914, 0.390583437592795, -0.0517278380129937,
0.130675886111931, 1.75869219276592, 5.16294142016704, 1.6287098247858,
0.180540865812873, 0.00345004025348317, -0.00640707753518654,
-0.0557882202656401, -0.102315283356802, -0.0604205183662998,
1.68885861739909, -0.308068507592907, -0.212684682310282,
-0.217642224242809, 0.390583437592795, 2.38099528360181,
0.44928722786608, 0.303934371004289, -7.24793213180419, 0.905061554590247,
0.2550876274654, -0.0470332395252626, 0.12450252029339, -0.0199308232140538,
-0.010064979960589, -0.0377995235112394, -0.0143190703738583,
0.0835348572536532, -0.121511533279772, -0.126972494740585,
-0.0262895269997898, -0.0517278380129937, 0.44928722786608,
1.06693138945957, 0.0337005872097507, -2.62429995245839,
0.273677628115365, 0.0144337519714099, 0.0619555180492171,
-0.0238602524404996, 0.0430737827628036, -0.0795672150388782,
0.00176447656485834, -0.00709574976553995, 4.09577286575313,
-0.0205952233045537, 0.0107769153601112, -0.0453131008271157,
0.130675886111931, 0.303934371004289, 0.0337005872097507,
1.34775586957403, 1.83078076076981, 0.00164249058798305,
0.442773128384033, -1.54872802227146, -0.446631389650065,
0.245708889679008, 0.0634021972700793, -0.132765521243527,
0.732132988900958, 8.87950967864981, 1.44423542280947, 1.14758491065459,
1.0592050472269, 1.75869219276592, -7.24793213180419, -2.62429995245839,
1.83078076076981, 58.3029862184503, -0.299391231806112, -0.778086544528378,
-4.71675953406248, 1.23410764274468, -1.24613535490425, -0.116058856747259,
0.420135947365452, 0.626541350357002, 21.4656728303453, -0.131532090108522,
0.69278131320516, 0.542795575597665, 5.16294142016704, 0.905061554590247,
0.273677628115365, 0.00164249058798305, -0.299391231806112,
1055.78737500878, -10.9958347280781, 0.536540483153658, -0.313848474320366,
0.314324339001359, 0.0542136859849052, -0.00942698363814998,
-0.068955813503635, -3.20622730498599, 0.0483201745282713,
0.16965125837487, 0.0150120342823357, 1.6287098247858, 0.2550876274654,
0.0144337519714099, 0.442773128384033, -0.778086544528378,
-10.9958347280781, 670.545294099156), .Dim = c(17L, 17L))),
list(list(structure(c(1, 0.00774525185660389, 0, 1), .Dim = c(2L,
2L))), list(c(-0.98822758684062, -1.82365193777049)), list(
structure(c(0.129149881060608, -0.076401704539865, -0.0106969806616589,
0.31584266793635, 0.0854991838529098, 0.00265398157084688,
0.0765240480365177, 0.229010176153145, 0.0744381626141558,
0.0071743351212725, 0.0144821711525186, 0.0909753563083434
), .Dim = c(2L, 2L, 3L))), c(4.12465264379121, 3.75849659831345
)))
## manage output
psi.mle[flag.mle==1] <- fit.mle[[1]]$par
psi.mle <- psi.mle + 1i*flag.mle
hess <- fit.mle[[1]]$hessian
par.mle <- fit.mle[[2]]
## get fixed effects
reg.trend <- NULL
for(k in 1:N) {
reg.trend <- cbind(reg.trend,sigex.fixed(data.ts,mdl,k,par.mle,"Trend"))
}
############################################
## checks for ragged lik calculation
#  (this block can be skipped for final results)
data.vec <- matrix(t(data.ts - reg.trend),ncol=1)
na.flag <- seq(1,length(data.vec))[is.na(data.vec)==FALSE]
x.acf <- sigex.resid(psi.mle,mdl,data.ts)[[2]]
x.acf2 <- aperm(x.acf,c(1,3,2))
x.acf2[,,1] <- x.acf[,1,]/2
gamma.bigmat <- matrix(sigex.blocktoep(x.acf2[,,1:(T-d),drop=FALSE]),N*(T-d),N*(T-d))
gamma.bigmat <- gamma.bigmat + t(gamma.bigmat)
d <- 0
gamma.bigmat <- matrix(sigex.blocktoep(x.acf2[,,1:(T-d),drop=FALSE]),N*(T-d),N*(T-d))
gamma.bigmat <- gamma.bigmat + t(gamma.bigmat)
likvar.mat <- gamma.bigmat[na.flag,na.flag,drop=FALSE]
likvar.chol <- t(chol(likvar.mat))
x.eps <- solve(likvar.chol,data.vec[na.flag,drop=FALSE])
alt.lik <- 2*log(det(likvar.chol)) + t(x.eps) %*% x.eps
print(alt.lik)
##  model checking
resid.mle <- sigex.resid(psi.mle,mdl,data.ts)[[1]]
psi.mle
dput(Re(psi.mle))
## wipe
rm(list=ls())
library(devtools)
setwd("C:\\Users\\Tucker\\Documents\\GitHub\\sigex")
load_all(".")
setwd("C:\\Users\\Tucker\\OneDrive\\Documents\\Research\\Casting")
dom <- read.table("bullwhipCase.dat")
setwd("C:\\Users\\Tucker\\OneDrive\\Documents\\Research\\Casting\\Figures")
# tti is Bathroom tissues (product 65)
# ptw is Paper towels (product 41)
# No information on start date, somewhere between 1989 and 1994
start.date <- c(1,1)
period <- 1
## create ts object and plot
dataALL.ts <- sigex.load(dom,start.date,period,c("tti","ptw"),TRUE)
N <- dim(dataALL.ts)[2]
T <- dim(dataALL.ts)[1]
## replace meager values by NA
for(k in 1:N)
{
times.zero <- seq(1,T)[dataALL.ts[,k] <= 0]
times.zero <- times.zero[-seq(1,length(times.zero))[is.na(times.zero)]]
dataALL.ts[times.zero,k] <- NA
}
## full span with log transform
transform <- "log"
aggregate <- FALSE
subseries <- c(1,2)
begin.date <- start.date
end.date <- end(dataALL.ts)
range <- list(begin.date,end.date)
data.ts <- sigex.prep(dataALL.ts,transform,aggregate,subseries,range,TRUE)
N <- dim(data.ts)[2]
T <- dim(data.ts)[1]
# best model was p=3, delta = [1,1,1]
ar.delta <- c(1,1,1)
ma.delta <- NULL
## model construction
mdl <- NULL
mdl <- sigex.add(mdl,seq(1,N),"varma",c(3,0),list(ar.delta,ma.delta),"process",1)
# regressors:
mdl <- sigex.meaninit(mdl,data.ts,0)
constraint <- NULL
par.mle <- sigex.default(mdl,data.ts,constraint)
psi.mle <- sigex.par2psi(par.mle,mdl)
## input parameter from previous fit (MLE on entire span)
#  divergence:  -317.8978
psi.mle <- c(0.00774525185660389, -0.98822758684062, -1.82365193777049,
0.327014237654645, -3.63780580373079, -1.25402162322456, 0.0633295016058837,
1.41173754160826, -4.08328432189346, -3.23260194827172, 0.09460417080606,
0.361799186195538, -5.13329190294931, -4.87327696696165, 0.0209583214353983,
4.12465264379121, 3.75849659831345)
##  model checking
resid.mle <- sigex.resid(psi.mle,mdl,data.ts)[[1]]
resid.mle <- sigex.load(t(Re(resid.mle)),start(data.ts),frequency(data.ts),colnames(data.ts),TRUE)
acf(resid.mle,lag.max=2*53)
## get fixed effects
reg.trend <- NULL
for(k in 1:N) {
reg.trend <- cbind(reg.trend,sigex.fixed(data.ts,mdl,k,par.mle,"Trend"))
}
############################################
## checks for ragged lik calculation
#  (this block can be skipped for final results)
#  divergence should be -317.8978
data.vec <- matrix(t(data.ts - reg.trend),ncol=1)
na.flag <- seq(1,length(data.vec))[is.na(data.vec)==FALSE]
x.acf <- sigex.resid(psi.mle,mdl,data.ts)[[2]]
x.acf2 <- aperm(x.acf,c(1,3,2))
x.acf2[,,1] <- x.acf[,1,]/2
d <- 0
gamma.bigmat <- matrix(sigex.blocktoep(x.acf2[,,1:(T-d),drop=FALSE]),N*(T-d),N*(T-d))
gamma.bigmat <- gamma.bigmat + t(gamma.bigmat)
likvar.mat <- gamma.bigmat[na.flag,na.flag,drop=FALSE]
likvar.chol <- t(chol(likvar.mat))
x.eps <- solve(likvar.chol,data.vec[na.flag,drop=FALSE])
alt.lik <- 2*log(det(likvar.chol)) + t(x.eps) %*% x.eps
print(alt.lik)
par.mle <- sigex.psi2par(psi.mle,constraint)
par.mle <- sigex.psi2par(psi.mle,mdl,data.ts)
## get fixed effects
reg.trend <- NULL
for(k in 1:N) {
reg.trend <- cbind(reg.trend,sigex.fixed(data.ts,mdl,k,par.mle,"Trend"))
}
############################################
## checks for ragged lik calculation
#  (this block can be skipped for final results)
#  divergence should be -317.8978
data.vec <- matrix(t(data.ts - reg.trend),ncol=1)
na.flag <- seq(1,length(data.vec))[is.na(data.vec)==FALSE]
x.acf <- sigex.resid(psi.mle,mdl,data.ts)[[2]]
x.acf2 <- aperm(x.acf,c(1,3,2))
x.acf2[,,1] <- x.acf[,1,]/2
d <- 0
gamma.bigmat <- matrix(sigex.blocktoep(x.acf2[,,1:(T-d),drop=FALSE]),N*(T-d),N*(T-d))
gamma.bigmat <- gamma.bigmat + t(gamma.bigmat)
likvar.mat <- gamma.bigmat[na.flag,na.flag,drop=FALSE]
likvar.chol <- t(chol(likvar.mat))
x.eps <- solve(likvar.chol,data.vec[na.flag,drop=FALSE])
alt.lik <- 2*log(det(likvar.chol)) + t(x.eps) %*% x.eps
print(alt.lik)
##  model checking
resid.mle <- sigex.resid(psi.mle,mdl,data.ts)[[1]]
resid.mle <- sigex.load(t(Re(resid.mle)),start(data.ts),frequency(data.ts),colnames(data.ts),TRUE)
sigex.portmanteau(resid.mle,4*period,length(psi.mle))
sigex.gausscheck(resid.mle)
acf(resid.mle,lag.max=40)
## check on standard errors and condition numbers
print(eigen(hess)$values)
# bundle for default span
analysis.mle <- sigex.bundle(data.ts,transform,mdl,psi.mle)
## load up the fitted model
data.ts <- analysis.mle[[1]]
mdl <- analysis.mle[[3]]
psi <- analysis.mle[[4]]
param <- sigex.psi2par(psi,mdl,data.ts)
## get imputations
tol <- 1e-10
times.na <- NULL
for(k in 1:N)
{
times.na <- union(times.na,seq(1,T)[is.na(data.ts)[,k]])
}
data.casts <- sigex.midcast(psi,mdl,data.ts,0)
x.casts <- data.casts[[1]] + t(reg.trend[times.na,])
se.casts <- matrix(sqrt(tol+diag(data.casts[[2]])),nrow=N)
data.casts <- list()
data.casts[[1]] <- data.ts
data.casts[[1]][times.na,] <- t(x.casts)
data.casts[[2]] <- data.ts
data.casts[[2]][times.na,] <- t(x.casts) + 2*t(se.casts)
data.casts[[3]] <- data.ts
data.casts[[3]][times.na,] <- t(x.casts) - 2*t(se.casts)
# plot of series with imputations as dashed lines
#pdf(file="DomCasts.pdf")
par(mfrow=c(N,1))
for(k in 1:N)
{
plot(data.casts[[1]][,k],ylab=colnames(data.ts)[k],col=grey(.3))
lines(data.casts[[2]][,k],col=grey(.7),lty=2)
lines(data.casts[[3]][,k],col=grey(.7),lty=2)
lines(data.ts[,k])
}
# plot of series with imputations as dashed lines
pdf(file="DomCasts-temp.pdf")
par(mfrow=c(N,1))
for(k in 1:N)
{
plot(data.casts[[1]][,k],ylab=colnames(data.ts)[k],col=grey(.3))
lines(data.casts[[2]][,k],col=grey(.7),lty=2)
lines(data.casts[[3]][,k],col=grey(.7),lty=2)
lines(data.ts[,k])
}
dev.off()
save.image("C:/Users/Tucker/OneDrive/Documents/Research/Casting/CastingDom_2-6-20.RData")
data.ts
is.na(data.ts[,1])
seq(1,T)[is.na(data.ts[,1])]
seq(1,T)[is.na(data.ts[,2])]
## wipe
rm(list=ls())
library(devtools)
setwd("C:\\Users\\Tucker\\Documents\\GitHub\\sigex")
load_all(".")
start.date <- c(10,1,2012)
end.date <- day2date(dim(retail)[1]-1,start.date)
period <- 365
# calendar calculations
start.day <- date2day(start.date[1],start.date[2],start.date[3])
end.day <- date2day(end.date[1],end.date[2],end.date[3])
begin <- c(start.date[3],start.day)
end <- c(end.date[3],end.day)
## create ts object and plot
dataALL.ts <- sigex.load(retail,begin,period,colnames(retail),TRUE)
## series 4482 with no transform
transform <- "none"
aggregate <- FALSE
subseries <- 5
range <- NULL
data.ts <- sigex.prep(dataALL.ts,transform,aggregate,subseries,range,TRUE)
## levels
par(mfrow=c(1,1))
for(i in 1:length(subseries))
{
sigex.specar(data.ts,FALSE,i,7)
}
dev.off()
## growth rates
par(mfrow=c(1,1))
for(i in 1:length(subseries))
{
sigex.specar(data.ts,TRUE,i,7)
}
dev.off()
first.day <- 1
data.ts <- sigex.daily2weekly(data.ts,first.day,start.date)
plot(data.ts)
N <- dim(data.ts)[2]
T <- dim(data.ts)[1]
easter.dates <- read.table("data\\easter500.txt")
easter.reg1 <- gethol(easter.dates,0,0,start.date,end.date)
easter.reg2 <- gethol(easter.dates,8,-1,start.date,end.date)
cyber.dates <- read.table("data\\cyber400.txt")
cyber.reg <- gethol(cyber.dates,0,0,start.date,end.date)
black.dates <- read.table("data\\black400.txt")
black.reg <- gethol(black.dates,0,0,start.date,end.date)
super.dates <- read.table("data\\super400.txt")
super.reg <- gethol(super.dates,0,0,start.date,end.date)
labor.dates <- read.table("data\\labor400.txt")
labor.reg <- gethol(labor.dates,0,0,start.date,end.date)
cny.dates <- read.table("data\\cny200.txt")
cny.reg <- gethol(cny.dates,0,0,start.date,end.date)
easter.reg1 <- sigex.daily2weekly(easter.reg1,first.day,start.date)
easter.reg2 <- sigex.daily2weekly(easter.reg2,first.day,start.date)
cyber.reg <- sigex.daily2weekly(cyber.reg,first.day,start.date)
black.reg <- sigex.daily2weekly(black.reg,first.day,start.date)
super.reg <- sigex.daily2weekly(super.reg,first.day,start.date)
labor.reg <- sigex.daily2weekly(labor.reg,first.day,start.date)
cny.reg <- sigex.daily2weekly(cny.reg,first.day,start.date)
# replace ragged NA with zero
easter.reg1[is.na(easter.reg1)] <- 0
easter.reg2[is.na(easter.reg2)] <- 0
cyber.reg[is.na(cyber.reg)] <- 0
black.reg[is.na(black.reg)] <- 0
super.reg[is.na(super.reg)] <- 0
labor.reg[is.na(labor.reg)] <- 0
cny.reg[is.na(cny.reg)] <- 0
# model construction
mdl <- NULL
mdl <- sigex.add(mdl,seq(1,N),"svarma",c(1,0,1,0,52),list(1,1,1,1),"process",1)
mdl <- sigex.meaninit(mdl,data.ts,0)
for(i in 1:N) {
mdl <- sigex.reg(mdl,i,ts(as.matrix(easter.reg1[,i]),
start=c(ceiling(start.day/7),start.date[3]),frequency=52,names="Easter-day"))
mdl <- sigex.reg(mdl,i,ts(as.matrix(easter.reg2[,i]),
start=c(ceiling(start.day/7),start.date[3]),frequency=52,names="Easter-pre"))
mdl <- sigex.reg(mdl,i,ts(as.matrix(cyber.reg[,i]),
start=c(ceiling(start.day/7),start.date[3]),frequency=52,names="Cyber"))
mdl <- sigex.reg(mdl,i,ts(as.matrix(black.reg[,i]),
start=c(ceiling(start.day/7),start.date[3]),frequency=52,names="Black"))
mdl <- sigex.reg(mdl,i,ts(as.matrix(super.reg[,i]),
start=c(ceiling(start.day/7),start.date[3]),frequency=52,names="Super"))
mdl <- sigex.reg(mdl,i,ts(as.matrix(labor.reg[,i]),
start=c(ceiling(start.day/7),start.date[3]),frequency=52,names="Labor"))
mdl <- sigex.reg(mdl,i,ts(as.matrix(cny.reg[,i]),
start=c(ceiling(start.day/7),start.date[3]),frequency=52,names="CNY"))
}
#constraint <- cbind(rep(0,132), diag(133)[-1,])
constraint <- NULL
constraint <- rbind(constraint,sigex.constrainreg(mdl,data.ts,list(2,2,2,2,2,2,2),NULL))
constraint <- rbind(constraint,sigex.constrainreg(mdl,data.ts,list(3,3,3,3,3,3,3),NULL))
constraint <- rbind(constraint,sigex.constrainreg(mdl,data.ts,list(4,4,4,4,4,4,4),NULL))
constraint <- rbind(constraint,sigex.constrainreg(mdl,data.ts,list(5,5,5,5,5,5,5),NULL))
constraint <- rbind(constraint,sigex.constrainreg(mdl,data.ts,list(6,6,6,6,6,6,6),NULL))
constraint <- rbind(constraint,sigex.constrainreg(mdl,data.ts,list(7,7,7,7,7,7,7),NULL))
constraint <- rbind(constraint,sigex.constrainreg(mdl,data.ts,list(8,8,8,8,8,8,8),NULL))
par.mle <- sigex.default(mdl,data.ts,constraint)
psi.mle <- sigex.par2psi(par.mle,mdl)
## input parameter from previous fit (MLE on entire span)
#  divergence:    -4296.088 lik
psi.mle <- c(0.363244177168849, -0.0348124553411078, 0.491812935546558,
0.298664579485942, 0.958839706417251, 0.649058647979278, 0.608776644746655,
0.478831183040553, 0.129174845416729, 0.357441000025807, -0.175296271876546,
0.276005377856337, 0.269077062659677, 0.305839799443437, 0.465325619348851,
0.309989084472692, 1.00266650620707, 0.945284838668533, -0.351837870657996,
0.41272938717394, 0.591105620527945, -5.28994657588153, -4.91910496349852,
-4.27036055397041, -4.82248752232916, -4.65943436732755, -3.87588417776183,
-3.92941606603775, 0.913875776488882, 0.712480543675576, 0.814594442258952,
0.749478015736889, 0.721083395836757, 1.02850751598126, 1.36676847713093,
-0.0477555089840049, 0.0543984824973383, 0.112526960556795, 0.69527709781001,
0.616977625726621, 0.129600441000298, 1.00969255207795, 1.34287738279926,
0.127449839211911, 0.618698719399354, -0.360550129374254, -0.527794651391414,
0.12578766310371, 0.224166617825289, -0.454710152081615, -2.11134495224294,
-0.797711156113367, -2.41406649740637, -2.06935629193996, -1.51982568020664,
-1.48986402602201, 0.519627640638326, -0.181076448940996, 0.559389928112255,
0.100435591468716, -0.0171806377898427, 0.0164507021442736, -0.403196270627646,
0.512173322398627, 0.298886682896712, 0.647708413781231, 0.0379183877001525,
-0.389608826739645, -0.0144545947136071, -0.229151542201359,
0.0536267430961695, -0.0853333065172167, 0.709125338027919, 0.40107989373423,
-0.0304577604786623, 0.212097320735218, 0.398670674723127, 0.971367530492058,
0.886069971389735, 0.2990451008724, -0.116720771915838, -0.153167737897416,
0.0248263996247087, 0.464393718027971, 0.160997949684508, 0.041102264735717,
0.267887556738469, -0.346068952332455, 2.04482409451882, -1.39363731237893,
1.3261449778714, -0.00152018545902026, 0.583207447984619, -0.873582895548445,
0.136394690653287, 0.0886494073381272, 0.0319031639756505, 0.741880507652434,
-1.19413928040843, -0.528813940233521, -1.72709675937164, -0.546682969964999,
0.282689049057667, -0.797082961445029, -1.98769200474362, -0.0418974672012462,
-0.131109945259649, 0.184816748264709, -0.0485903400491216, 0.00209450031473688,
-0.193133159342873, -0.338140481905727, 0.194497356674994, -0.255806029012376,
0.328352880347265, -0.020839316967471, -0.514458485353016, 0.487601385640556,
-0.0663168257689432, 0.197491131016232, -0.948263145001085, 0.58503991631881,
-0.373159031557823, -0.535032492357484, 0.24811941449075, -0.283924547798,
0.950787256576206, -0.852207175545125, 0.0584615417056083, 0.0532149301262836,
2.70711727317259, -0.118431624115301, 0.171386079598921, 0.0380331425134629,
0.938879481938871, -0.852207175545123, 0.0584615417056076, 0.0532149301262835,
2.70711727317259, -0.118431624115301, 0.17138607959892, 0.0380331425134629,
0.919716685878865, -0.852207175545125, 0.0584615417056085, 0.0532149301262835,
2.70711727317259, -0.118431624115301, 0.171386079598921, 0.038033142513463,
0.954766752731184, -0.852207175545125, 0.0584615417056093, 0.053214930126284,
2.70711727317259, -0.118431624115301, 0.171386079598921, 0.0380331425134627,
1.01434200276068, -0.852207175545126, 0.0584615417056081, 0.0532149301262839,
2.70711727317259, -0.118431624115301, 0.171386079598921, 0.0380331425134631,
1.31309017375681, -0.852207175545125, 0.0584615417056079, 0.0532149301262842,
2.70711727317259, -0.1184316241153, 0.171386079598921, 0.0380331425134629,
1.73161669258616, -0.852207175545125, 0.0584615417056081, 0.0532149301262825,
2.70711727317259, -0.118431624115301, 0.17138607959892, 0.0380331425134629
)
par.mle <- sigex.psi2par(psi.mle,mdl,data.ts)
##  model checking
resid.mle <- sigex.resid(psi.mle,mdl,data.ts)[[1]]
resid.mle <- sigex.load(t(Re(resid.mle)),start(data.ts),frequency(data.ts),colnames(data.ts),TRUE)
acf(resid.mle,lag.max=2*53)
sigex.eta2psi
sigex.psi2par
