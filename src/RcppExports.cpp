// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// getRe
arma::vec getRe(arma::cx_vec x);
RcppExport SEXP _sigex_getRe(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cx_vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(getRe(x));
    return rcpp_result_gen;
END_RCPP
}
// getIm
arma::vec getIm(arma::cx_vec x);
RcppExport SEXP _sigex_getIm(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cx_vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(getIm(x));
    return rcpp_result_gen;
END_RCPP
}
// getRagIndex
IntegerVector getRagIndex(ComplexVector zval);
RcppExport SEXP _sigex_getRagIndex(SEXP zvalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector >::type zval(zvalSEXP);
    rcpp_result_gen = Rcpp::wrap(getRagIndex(zval));
    return rcpp_result_gen;
END_RCPP
}
// subsetting
IntegerVector subsetting(IntegerVector x, IntegerVector y, double z);
RcppExport SEXP _sigex_subsetting(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(subsetting(x, y, z));
    return rcpp_result_gen;
END_RCPP
}
// matmult
arma::mat matmult(arma::mat A, arma::mat B);
RcppExport SEXP _sigex_matmult(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(matmult(A, B));
    return rcpp_result_gen;
END_RCPP
}
// kronprod
arma::mat kronprod(arma::mat A, arma::mat B);
RcppExport SEXP _sigex_kronprod(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(kronprod(A, B));
    return rcpp_result_gen;
END_RCPP
}
// vec2mat
arma::vec vec2mat(arma::vec x);
RcppExport SEXP _sigex_vec2mat(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vec2mat(x));
    return rcpp_result_gen;
END_RCPP
}
// mvar_midcast
List mvar_midcast(arma::cube x_acf, ComplexMatrix z, NumericVector delta, bool debug);
RcppExport SEXP _sigex_mvar_midcast(SEXP x_acfSEXP, SEXP zSEXP, SEXP deltaSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type x_acf(x_acfSEXP);
    Rcpp::traits::input_parameter< ComplexMatrix >::type z(zSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(mvar_midcast(x_acf, z, delta, debug));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sigex_getRe", (DL_FUNC) &_sigex_getRe, 1},
    {"_sigex_getIm", (DL_FUNC) &_sigex_getIm, 1},
    {"_sigex_getRagIndex", (DL_FUNC) &_sigex_getRagIndex, 1},
    {"_sigex_subsetting", (DL_FUNC) &_sigex_subsetting, 3},
    {"_sigex_matmult", (DL_FUNC) &_sigex_matmult, 2},
    {"_sigex_kronprod", (DL_FUNC) &_sigex_kronprod, 2},
    {"_sigex_vec2mat", (DL_FUNC) &_sigex_vec2mat, 1},
    {"_sigex_mvar_midcast", (DL_FUNC) &_sigex_mvar_midcast, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_sigex(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
